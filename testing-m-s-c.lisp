(defvar inv 0)

(defun supermerge (list1 list2 size-list1)
  (cond ((null list1) list2)
	((null list2) list1)
	((<= (car list1) (car list2))
	 (let ((thelist (supermerge (cdr list1) list2 (- size-list1 1))))
	   (cons (car list1) thelist)))
	(t (let ((thelist (supermerge list1 (cdr list2) size-list1)))
	     (setf inv (+ inv size-list1))
	     (cons (car list2) thelist)))))


(defun merge-sort-count (alist &optional (size -1))
  (let* ((size (if (< size 0)
		   (length alist)
		   size))
	   (half (floor size 2)))
    (if (>= size 2)
	(let ((list1 (merge-sort-count (subseq alist 0 half) half))
	      (list2 (merge-sort-count (subseq alist half) (- size half))))
	    (supermerge list1 list2 half))
	alist)))

(defun txt2list (name)
  (time (with-open-file (in name)
	  (let ((res))
	    (do ((line (read-line in nil nil)
		       (read-line in nil nil)))
		((null line)
		 (reverse res))
	      (push (parse-integer line) res))))))
